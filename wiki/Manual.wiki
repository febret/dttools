=dttools 1.2 Manual=
This page offers a quick overview on how to use the tools included in this package. All the tools are driven by configuration files, so the general tool usage syntax is {{{<toolname> <config-file>}}}
The supported configuration parameters for each tool are presented in the respective sections. The /data folder in the tool distribution contains several configuration files used for processing the 2009 bonney deltaT data. They serve as an example on how to use most of the toolset functionalities

These configuration files follow a simple naming convention
'<configName>.<toolName>.cfg'

i.e.
'bonney-09-dive13.dtrt.cfg' is a configuration file for the dtrt tool

=TOOL USAGE EXAMPLE=
This example will show how to use the toolset under Windows to process the Bonney 2009 deltat data and generate a bathymetry model out of it.
The toolset is already distributed with a set of configuration, batch and utility files to perform this task. Only minor modifications should be needed to process the data on your machine.

==Prerequisites==
You need to have the complete bonney 2009 dataset available. In particular, the toolset will use the deltaT and pose files present in the extracted_data folder of each dive.

===1. CHECK THE DIVE CONFIGURATION FILES===
The reconstruction uses a subset of dives for the 2009 data (13, 17, 18 - 27). Each dive has its own
configuration file in the data folder (i.e. bonney-09-dive20.dtrt.cfg)
Each of these files contains the ABSOLUTE paths to the respective source data files in the bonney dataset
by default, the configurations expect to find these files under G:/bonney_2009. You may
need to modify the paths in each file if your dataset is stored somewhere else.

===2. CHECK THE BATCH FILES===
Open bonney-dtrt.bat and bonney-mesh.bat
The first lines of these files point to the paths to the tools used in the processing:
(example, bonney-dtrt.bat)


'SET dtrt=D:/Workspace/ENDURANCE/dttools/bin/win-x86-vs9-release/dtrt.exe'

Again, the path is absolute. You have to modify this to point to the /bin/win-x86-vs9-release folder
in your own installation.
EXAMPLE:
if your tools are under C:/dttool the previous line would become:

SET dtrt=C:/dttools/bin/win-x86-vs9-release/dtrt.exe 

===3. RUN THE RAYTRACER===
Run bonney-dtrt.bat
Once done, the tool should have generated a set of CSV files in the /data/bonney folder.
These files contain the raytraced point clouds for each separate dive.

===4. RUN THE MERGER AND SURFACE GENERATOR===
Run bonney-mesh.bat
At the end of the process, you will find two new files in the /data/bonney folder

bonney.xyz is a text file containing a new point cloud obtained by merging and resampling
all the dives. Also, a normal has been computed for each point and appended after the point coordinates.
It is possible to visualize this file directly using, i.e. MeshLab (http://meshlab.sourceforge.net/)

bonney.ply is the final mesh generated by the Poisson reconstructor.
NOTE: Poisson reconstruction generates CLOSED surfaces, so visualizing this mesh directly will make little
sense: you can do this anyway using again MeshLab.

To obtain the final bathymetry, bonney.ply needs to be clipped to take away the irrelevant part of the generated
mesh.
To assist in this process, a ParaView state file has been added (bonney.psvm)

===5. OBTAIN THE FINAL CLIPPED MESH===
To perform this step, you will need to install ParaView (http://www.paraview.org/)
Inside paraview click on File>Load State and select bonney.psvm
The file will load the model and perform the clipping.
The dafault visualization will show the glacier surface only. Clicking on the eye
buttons next to specific features in the Pipeline Browser, you can turn
on the visualization of the entire lake.

This tool also allows you to perform additional processing on the data (ie. contour
generation, mesh coloring, merging with other data, etc.), and to save specific portions of the mesh
as separate files that can be subsequently opened in other tools.

=TOOLSET REFERENCE=
==dtrt==
the raytracer tool takes care of reading deltat and pose data from a set of dives (in the .txt format used in the ENDURANCE dataset), perform navigation merging, and raytrace the beams using a sound speed profile.
The tool accepts a single configuration file as input: the syntax is 'dtrt <config file>' (i.e. 'dtrt downdives09.cfg') The configuration file specifies where the input data is, the sonar configuration, what sound speed profile to use and so on.

===SUPPORTED CONFIGURATION COMMANDS:===
 * 'includeConfig (string)': Allows the inclusion of an external config file into the current file. Useful for sharing configuration entries across multiple files.
	
 * 'sensorPosition[0..3] (float)': Specifies the x,y,z coordinates of the sensor position wrt the AUV reference frame.
	
 * 'sensorRotation[0..3] (float)': Specifies the x,y,z rotation of the sensor wrt the AUV reference frame.
	
 * 'poseTranslation[0..2] (float)': Specifies the x,y,z translation offset for pose coordinates.
	
 * 'poseTransform[0..8] (float)': Specifies a 3x3 transform matrix for pose coordinates.
	
 * 'pingDecimation (int)': Specifies a decimation factor for pings. If != 0, Only one every pindDecimation pings will be considered.
	
 * 'beamDecimation (int)': Specifies a decimation factor for beams. If != 0, Only one every beamDecimation beams will be considered.
	
 * 'beamFilterAngleMin (float) [default: -180]': Specifies the minimum beam angle used for filtering beams
	
 * 'beamFilterAngleMax (float) [default: 180]':	Specifies the maximum beam angle used for filtering beams
	
rangeThreshold (float) (default: 0)
	Specifies the minimum range a beam must return (in meters) to be considered 
	for further processing

svpFile (string)
	Specifies the path to a sound velocity profile to be used for beam raytracing.
	If this command is not present, no raytracing will be performed on the sonar beams.

surfaceSoundVelocity (float) [default: 1500]
	Specifies the surface sound velocity used by the raytracer. 
	
outputFile (string) [default: output.csv]
	Specifies the name of the output file.
	
outputFormat (string) [default: CSVPoints]
	Specifies the output format.
	Supported values are:
	CSVPoints
	CSVPointsPose
	CSVPointsWithBeamInfo
	CSVPointsWithBeamPoseInfo
	XYZBinaryPointsWithNormals
	XYZPointsWithNormals
	Additional information about the formats is presented at the end of this document.
	
inputFiles (int)
	Specifies the number of input files

diveTag[0..{inputFiles-1}] (int) 
	Associates a dive tag to the specified input file
	
deltatFile[0..{inputFiles-1}] (string)
	Specifies the path to a DeltaT file

poseFile[0..{inputFiles-1}] (string)
	Specifies the path to a pose file

outputBufferSize (int) [default: 8000]
	Specifies the size of the output buffer used for writing the final point cloud (in kilobytes).

	

dtmerge
-----------------------------------------------------------------------------------------------------
dtmerge is used to merge data into a single point cloud, performing data gridding and noise reduction

SUPPORTED PARAMETERS:
inputFiles (int)
	Specifies the number of input files

inputFile[0..{inputFiles-1}] (string) 
	Specifies the path to an input file

inputFormat (string)
	Specifies the input file format.
	Supported values are:
	CSVPoints
	XYZBinaryPointsWithNormals
	XYZPointsWithNormals
	Additional information about the formats is presented at the end of this document.
	
outputFile (string) 
	Specifies the name of the output file
	
outputFormat (string)
	Specifies the output file format.
	Supported values are:
	CSVPoints
	XYZBinaryPointsWithNormals
	XYZPointsWithNormals
	Additional information about the formats is presented at the end of this document.
	
clipBoundsMin[0..2] (float)
	Specifies the x,y,z coordinates of the the lower vertex of a clipping box for the data.
	Only points inside the box will be output.

clipBoundsMax[0..2] (float)
	Specifies the x,y,z coordinates of the the upper vertex of a clipping box for the data.
	Only points inside the box will be output.

voxelSize (float)
	Specifies the voxel size used to grid, average and filter datapoints (in meters). 
	
qualityThreshold (int)
	Specifies the number of points inside a voxel needed to consider that voxel data instead 
	of noise.
	
inputBufferSize (int) [default: 128000]
	Specifies the size of the input buffer used for reading the point cloud (in kilobytes).
	
preallocBins (int) [default: 0]
	Specifies how many bin entries are preallocated for the binning grid. Preallocation
	can be used to avoid out-of-memory issues, preventing reallocations of the bin vector
	during point gridding.
	
dtpoisson
-----------------------------------------------------------------------------------------------------
dtpoisson takes a point coud decorated with normals and generates a mesh using the Poisson surface 
reconstruction method.

SUPPORTED PARAMETERS:
inputFile (string) 
	Specifies the path to the input file

inputFormat (string) 
	Specifies the input file format.
	Supported values are:
	XYZPointsWithNormals
	Additional information about the formats is presented at the end of this document.
	
outputFile (string) 
	Specifies the name of the output file
	
outputFormat (string)
	Specifies the output file format.
	Supported values are:
	XYZPointsWithNormals
	PLY
	Additional information about the formats is presented at the end of this document.

solverDepth (int)
	Specifies the depth of the octree grid used for reconstructing the surface. Higher
	values mean higher resolution.

normalNeighbors (int) [default: 0]
	Number of point neighbors used in the normal estimation step. If this value is too low,
	resulting normal orientations may not be propagated correctly. If normalNeighbors are not
	specified, normal calculation won't be performed.

dtoccup
-----------------------------------------------------------------------------------------------------
dtoccup is an experimental tool used to generate occupacy grids from point cloud and pose data.
Unused and unsupported at the moment.


FILE FORMAT REFERENCE
=====================================================================================================
CSVPoints
	Comma separated values file with x, y, z triplets of point coordinates
	
CSVPoints2
	As CSVPoints, but the first entry in each record line will be ignored 
	(useful for timestamped files or similar)
	
CSVPointsPose
	Comma separated values file with x, y, z triplets of point coordinates and x, y, z coordinates
	of positions correspoding to the AUV pose when the point was generated.

CSVPointsWithBeamInfo
	Comma separated values file with x, y, z triplets of point coordinates, beam angle for the point,
	beam range and timestamp.

CSVPointsWithBeamPoseInfo
	Same as CSVPointsWithBeamInfo, plus x, y, z coordinates	of positions correspoding to the AUV pose 
	when the point was generated, and dive tag.

XYZPointsWithNormals
	Space separated values with x, y, z triplets of point coordinates and x, y, z values for normals

XYZBinaryPointsWithNormals
	Same as XYZPointsWithNormals but in binary format, with 4-byte floats for each entry

PLY
	Mesh data in the PLY format.